今天我将按照以下学习计划进行Java基础复习。请充当我的老师，并指导我一步步完成每个学习环节。在我执行每个步骤时，如果有任何问题或疑问，请帮助我解决，并在我理解并完成当前步骤后，指导我进入下一个步骤。请确保每次只给我当前步骤的内容，等我完成后再继续给我下一步内容。

---

# 第1阶段 第1周 第4天：开发工具综合复习与实践

**学习目标：** 本日的主题是对常用开发工具的综合复习与实践，涵盖 Git（版本控制）、Maven（构建工具）、MySQL（数据库基本操作与优化），并简要熟悉 IntelliJ IDEA 和 Docker 的基本使用。通过约 3~4 小时的高效学习和实战练习，巩固这些工具在实际工程中的应用，为胜任外企中高级 Java 开发岗位打下坚实基础。

## 模块1：Git 版本控制（1小时）

Git 是分布式版本控制工具，是团队协作开发的基石。在本模块中，将重点回顾 Git 的核心概念和常用命令，并了解团队协作的规范流程。

**学习内容与目标：**
- 理解 Git 的基本概念：工作区、暂存区、版本库、远程仓库等。
- 熟练掌握日常使用的 Git 命令，例如初始化仓库、提交更改、分支创建合并、查看日志、撤销修改等。日常开发中常用的命令大约6个即可应付大部分情况，但要熟练运用，可能需要记住六十到一百个命令 ([常用 Git 命令清单 - 阮一峰的网络日志])。因此本模块将聚焦最常用命令，并了解一些高级用法如 `rebase`、`stash` 等。
- 了解团队协作中的 Git 工作流（workflow）的重要性。良好的协作需要规范的流程，使项目顺畅推进 ([Git 工作流程 - 阮一峰的网络日志])。熟悉业界广泛使用的几种 Git 分支模型，如 Git Flow、GitHub Flow 和 GitLab Flow 等，理解各自的特点和适用场景。

**学习资源：**
- **Git 官方指南（Pro Git 中文版）**：全面的 Git 指南，涵盖从基础到高级的使用方法，可按需查阅相关章节练习 ([Maven笔记---超详细 - 天下没有收费的bug - 博客园])。
- **常用 Git 命令清单**（阮一峰）： ([常用 Git 命令清单 - 阮一峰的网络日志]) ([常用 Git 命令清单 - 董川民])该清单总结了 Git 最常用的命令，适合作为备忘和参考。在练习过程中可随时对照此清单，熟悉常见操作的命令格式。
- **廖雪峰的 Git 教程**：循序渐进的中文 Git 教程，从零开始演示 Git 的各项功能，包括分支管理和远程仓库的使用等。适合对概念不清楚时快速查阅（例如工作区/暂存区等概念）。

**练习：**
1. **版本库操作练习：** 在本地新建一个 Git 仓库（`git init`），编写一个简单的README文件并多次提交变化。练习使用 `git add`、`git commit`、`git log` 等命令查看提交历史，体会版本演进。之后，创建一个新分支（`git branch` + `git checkout` 或 `git switch`），在新分支上修改README并提交，然后切换回主分支将改动合并（`git merge`）。尝试模拟一次合并冲突并使用 `git status`、`git diff` 定位冲突，手工解决后提交。
2. **远程协作练习：** 如果条件允许，创建一个远程仓库（比如在GitHub上创建测试仓库），将本地仓库关联远程（`git remote add`）并推送（`git push`）。在远程仓库上模拟团队协作情景，例如通过GitHub网页修改文件，然后在本地使用 `git pull` 拉取并合并变化。通过该练习，熟悉远程仓库的基本操作和协作流程。

> **工程化建议：** 在使用 Git 时养成良好的工程习惯，例如提交信息（commit message）要清晰明了，遵循一定规范；在团队协作时推行代码评审（Pull Request），并遵守团队约定的分支策略（如 GitFlow 等）。这些实践有助于提高协作效率和代码质量。

## 模块2：Maven 构建工具（1小时）

Maven 是Java领域常用的项目构建与依赖管理工具。本模块将复习 Maven 的基本用法和原理，包括构建生命周期、依赖管理以及典型项目结构。

**学习内容与目标：**
- 理解 Maven 的定位和作用：Maven 本质上是一个项目管理工具，提供标准化的项目对象模型（POM）。Maven 可以实现自动化构建、依赖管理以及统一项目结构等功能 ([Maven笔记---超详细 - 天下没有收费的bug - 博客园])。在大型项目中，Maven 不可或缺，可简化构建发布流程。
- 熟悉 Maven 常用命令和生命周期阶段：如 `mvn clean`（清理）、`mvn compile`（编译）、`mvn test`（测试）、`mvn package`（打包）、`mvn install`（安装到本地仓库）、`mvn deploy`（发布到远程仓库）等。了解每个阶段的作用，掌握一键构建打包项目的流程。
- 掌握依赖管理基础：会查看和编辑 `pom.xml`，添加依赖坐标（groupId、artifactId、version），理解依赖范围（scope）以及依赖冲突的基本解决方法（例如排除冲突依赖）。熟悉中央仓库和本地仓库的概念，以及如何配置镜像仓库加速依赖下载。

**学习资源：**
- **Maven 官方入门指南**：阅读 Maven 官方提供的 “Five Minutes Guide” 或相关文档，了解创建和构建一个简单 Maven 项目的步骤，对 Maven 坐标和仓库等概念快速过一遍。
- **Maven 实战笔记**：参考社区整理的 Maven 教程或笔记，如博客园的*Maven笔记---超详细* ([Maven笔记---超详细 - 天下没有收费的bug - 博客园])或 InfoQ 上的“Maven 学习笔记” ([阿里 P8大牛的 Maven学习笔记，在 GitHub上仅一天就获赞 上万 - InfoQ 写作平台])。这些资料总结了 Maven 的核心概念和常用操作，包括如何管理依赖、插件的使用等，非常适合复习要点。
- **常用 Maven 命令速查表**：可以准备一份常用 Maven 命令列表，在练习时对照使用 ([Maven常用命令详情 - 阿里云开发者社区])。例如博客文章*“这30个常用的 Maven 命令你必须熟悉！”*总结了从创建项目到部署的各阶段命令，方便查阅练习。

**练习：**
1. **构建项目练习：** 新建一个 Maven 项目并完成构建发布流程。可以使用 Maven 自带的原型（archetype）快速生成项目结构，例如运行 `mvn archetype:generate` 创建一个简单的 Java 项目骨架。然后练习运行 `mvn compile` 编译代码，`mvn test` 执行测试（可自行添加简单单元测试方法），`mvn package` 打包生成 JAR。检查生成的 `target` 目录，确认产出物。
2. **依赖管理练习：** 在上述 Maven 项目的 `pom.xml` 中，引入一个第三方库作为依赖（例如 Google Guava 或 Apache Commons Lang 等）。使用 Maven 中央仓库查找坐标，在 POM 的 `<dependencies>` 节中添加相应依赖。执行 `mvn compile`/`mvn install`，观察 Maven 自动下载依赖 JAR 包到本地仓库的过程 ([Maven笔记---超详细 - 天下没有收费的bug - 博客园])。然后模拟依赖冲突：添加一个依赖版本冲突的情形（可引入一个传递性依赖不同版本的库），运行 `mvn dependency:tree` 查看依赖树，练习使用 `<exclusions>` 排除多余依赖或在 POM 中统一依赖版本来解决冲突。

> **工程化建议：** 使用 Maven 要注意保持依赖的干净和一致。例如不随意引入不必要的依赖，定期清理检查依赖树；管理好版本号（可以利用属性或Dependency Management统一版本）；在团队中配置私有Maven仓库以加速构建等。此外，掌握 Maven Wrapper 的使用，可以确保团队使用统一的 Maven 版本执行构建。

## 模块3：MySQL 数据库操作与优化（1小时）

本模块聚焦 MySQL 数据库的基本操作以及初步的性能优化概念。对于中高级开发，不仅需要会增删改查数据，还应了解如何设计高效查询和进行基本的优化。

**学习内容与目标：**
- 回顾 MySQL 常用操作：包括数据库和表的创建与修改 (DDL)，基本的增删改查 (DML) 语句，以及多表查询（JOIN）的用法。确保能够使用命令行或客户端工具执行 SQL，并理解结果。
- 理解索引对于查询性能的影响：MySQL 官方将索引定义为**帮助数据库高效获取数据的数据结构** ([MySQL索引优化（超详细）-CSDN博客])。学习常见的索引类型（如B树索引）、索引的创建和删除方法，以及在什么情况下应当建立索引。例如，在哪些列上建索引可以加速查询，以及避免索引失效的操作（如对列使用函数计算或混合数据类型比较）。
- 初步了解查询优化思路：掌握使用 `EXPLAIN` 分析查询执行计划，理解输出的各列含义（比如 `type`、`key`、`rows` 等）以判断查询是否利用了索引。了解慢查询日志的作用，以及基本的SQL优化技巧（如避免在 WHERE 条件中对索引列进行操作、拆分复杂查询等）。
- 明确数据库设计对性能的影响：熟悉范式理论的基础上，了解在实际工程中有时会为性能做反范式设计（如适当冗余字段以减少JOIN）。知道大表数据量过大时可以考虑分库分表等措施)（尽管这些是高级优化策略，需在后续深入学习）。

**学习资源：**
- **MySQL 官方文档**：参考 MySQL 官方手册中关于 SQL 基础和索引章节，了解 MySQL 支持的数据类型、索引原理等权威资料。官方文档详尽权威，适合查阅具体语法和行为细节。
- **MySQL 基础教程与实践**：国内有许多 MySQL 入门教程，例如尚硅谷/MySQL必知必会等文章或视频，总结了创建数据库、编写基本SQL的步骤。可选用自己喜欢的教程快速过一遍基本操作以确保无遗漏。
- **性能优化笔记**：参考博客或社区文章如*《MySQL索引原理及慢查询优化》*（美团技术团队）或*《MySQL 高性能优化规范建议》* ([MySQL高性能优化规范建议总结 | JavaGuide]) ([MySQL高性能优化规范建议总结 | JavaGuide])等，这些总结提供了在实际开发中优化 MySQL 的经验法则。例如如何正确使用索引、SQL 编写的规范（避免 SELECT * 等）、以及一些配置层面的建议。这些资源有助于建立对数据库优化的初步认识。

**练习：**
1. **SQL 基础操作练习：** 在本地安装 MySQL 数据库（或使用 Docker 提供 MySQL 容器，见后续模块），创建一个测试数据库，如 `practice_db`。在其中创建一两个表（例如用户表和订单表），设计少量字段并设置主键。然后插入若干测试数据（可以人工构造几条记录）。练习基本查询：编写 SELECT 语句按不同条件检索数据，尝试使用 WHERE 子句、ORDER BY 排序、JOIN 联合查询两表的数据。练习更新和删除操作，但要注意通过 WHERE 限定作用范围。确保对增删改查操作的SQL语法滚瓜烂熟。
2. **索引与查询优化练习：** 延续上面的测试库，在用户或订单表的常用查询列上创建索引（例如在用户表的 email 字段上创建索引，`CREATE INDEX idx_user_email ON users(email)`）。编写一条涉及该字段的查询并使用 `EXPLAIN` 查看执行计划，确认 Extra 字段显示 "Using index" 等字样以确定索引被利用。然后尝试不走索引的情况，例如对索引列使用函数或在 WHERE 中对索引列进行范围查询，看看执行计划的变化。可以刻意插入大量重复数据以制造需要优化的情景。比如插入上万条记录，然后对没有索引的列做查询，体验查询耗时，再给该列加上索引后对比执行速度。通过实验，直观体会索引对查询效率的提升。

> **工程化建议：** 数据库方面应养成**勤分析慢查询**的习惯。定期检查慢查询日志，针对频繁出现的慢SQL进行优化（添加索引或改写语句）。在设计表结构时，在满足业务前提下尽量遵循范式，避免数据冗余，但也不过度追求范式以致影响性能。对数据库进行变更（如加索引、修改字段类型）要谨慎，在测试环境评估影响。与此同时，可以学习使用数据库迁移工具来版本化管理数据库变更，确保团队协作中数据库 schema 保持一致。

## 模块4：IntelliJ IDEA 基本使用（30分钟）

IntelliJ IDEA 是目前主流的Java集成开发环境 (IDE) 之一，在提高开发效率方面有卓越的表现。本模块简要介绍 IDEA 的基础使用方法和常见技巧，帮助你养成使用高效IDE的良好习惯。

**学习内容与目标：**
- 熟悉 IntelliJ IDEA 的界面布局和基本操作：了解 Project、Module 等概念与 Eclipse 的区别 ([新手使用IntelliJ IDEA需要的基本操作_idea如何进入-CSDN博客])。学会创建或导入一个现有的 Maven 项目，并熟悉项目视图、编辑器、控制台等窗口的切换。
- 掌握常用快捷键和自动化功能：如代码自动补全、快速修复导入、生成代码模板（例如键入 `psvm` 快速生成 `public static void main`）、快捷格式化代码、智能提示等。IDEA 的强大之处在于**高效便捷**，几乎不用鼠标也能完成大部分操作 ([新手使用IntelliJ IDEA需要的基本操作_idea如何进入-CSDN博客])。熟练一些常用快捷键（Ctrl+N 查找类、Ctrl+Shift+F 全局搜索文本等），能极大提高编码速度。
- 了解 IDEA 对 Git 和 Maven 的内置支持：比如如何在 IDE 中直接使用 Git 执行提交和同步（IDEA 提供了可视化的版本控制工具窗口）以及在IDE中运行 Maven 命令、查看依赖树等。通过 IDE 可以更加直观地完成版本管理和构建任务。
- 简单体验调试功能：学会设置断点并运行调试（Debug），观察变量状态和调用栈。这是开发人员必须掌握的技能，IDEA 提供了友好的调试界面，能够大大加快问题定位和解决的过程。

**学习资源：**
- **IntelliJ IDEA 官方指南**：JetBrains 官方网站提供了丰富的文档和教程，包括新手上手指南和常见问题解答。通过阅读官方教程，可以了解 IDEA 的核心功能和一些提高效率的技巧。
- **IntelliJ IDEA 中文教程**：参考开源的 *IntelliJ IDEA 简体中文专题教程*（GitHub 项目 judasn/IntelliJ-IDEA-Tutorial），其中系统介绍了 IDEA 的安装、配置、插件以及各项功能，用中文讲解对新手非常友好。
- **社区经验分享**：阅读像 CSDN 或博客园上有经验的程序员分享的 IDEA 使用技巧文章。例如*CSDN 博客《新手使用 IntelliJ IDEA 需要的基本操作》* 中，就总结了从 Eclipse 转到 IDEA 时需要了解的一些核心概念和常用功能。这些经验之谈能帮助你避开常见陷阱，更快发挥 IDEA 的威力。

**练习：**
1. **IDE 操作练习：** 打开 IntelliJ IDEA，新建一个 Maven 项目（可重用之前模块创建的练习项目）。熟悉以下操作：使用快捷键在项目中搜索文件和类；重构一个类名或方法名（IDEA 会自动修改引用的地方）；尝试使用自动补全编写一段简单的 Java 代码（如定义一个类和主方法）；使用 IDE 内置的提示修正一个拼写错误或导入 missing 的包。通过这些微任务，体会 IDEA 提升开发效率的功能点。
2. **调试练习：** 为练习项目编写一两个简单的函数，然后编写含 bug 的调用代码。设置断点并以 Debug 模式运行程序，让执行在断点处暂停。在调试界面查看变量的值，单步执行代码，尝试修改变量值后继续运行。练习使用调试器的功能如“步入/步过”（Step Into/Over）、观察表达式等。通过实际调试过程，熟悉 IDEA 调试工具的使用，为以后排查复杂问题做好准备。

> **工程化建议：** 善用 IDE 提供的工具提高工作效率。例如，充分利用 **Git 集成** 在提交前查看差异、解决简单冲突；使用 **Todo功能** 标记代办事项；安装合适的插件（如 CheckStyle 代码规范检查）以保持代码质量。在IDE中配置好代码风格，以统一团队代码格式。IDEA 的强大功能很多，建议在日常使用中留意并学习一个新技巧，日积月累将大幅提升开发产出。

## 模块5：Docker 基本使用（30分钟）

Docker 是当今应用部署与交付的重要工具。作为一名中高级开发，需要对容器化有基本的认识。本模块将介绍 Docker 的核心概念和基础命令，让你能够自行运行和部署简单的容器应用。

**学习内容与目标：**
- 理解 Docker 的作用：Docker 基于容器（Container）技术，对应用及其依赖进行打包，从而实现一次封装、随处运行。相比传统的虚拟机，Docker 更加轻量和高效。通过容器，开发环境和线上环境可以保持一致，大幅减少“在我机器上能跑”的问题。
- 熟悉 Docker 基本概念：镜像（Image）是应用的只读模板，容器（Container）是镜像的运行实例，仓库（Registry）用于集中存储和分发镜像。理解这些概念有助于把握 Docker 的工作原理，比如从仓库拉取镜像然后基于镜像启动容器。
- 掌握常用命令：练习 Docker 的核心命令，如：`docker pull` 拉取镜像，`docker images` 列出本地镜像，`docker run` 运行容器（可以加 `-d` 后台运行，`-p` 做端口映射），`docker ps` 查看运行中的容器，`docker stop`/`rm` 停止和删除容器，`docker rmi` 删除镜像等。还应了解查看容器日志（`docker logs`）和进入容器（`docker exec`）的命令。
- 简单了解 Dockerfile：Dockerfile 是构建镜像的脚本文件。虽然本次只做简要熟悉，但可以浏览一个简单 Dockerfile 的例子，看看如何从基础镜像添加文件、安装依赖、设置启动命令等。这有助于理解镜像是如何构建出来的，以及定制镜像的思路。

**练习：**
1. **运行官方示例容器：** 安装好 Docker 环境后，运行 `docker run hello-world` 来拉取并启动一个官方的示例容器。这个容器会打印一段欢迎信息然后退出，通过这个步骤验证 Docker 安装成功，并初步体验镜像拉取和容器运行的过程。接着，尝试运行一个常见服务的容器，例如执行 `docker run -d -p 8080:80 nginx` 启动 Nginx 容器。在浏览器中访问 http://localhost:8080 ，确认看到 Nginx 欢迎页。通过这个练习，掌握启动容器和端口映射的基本方法。
2. **将应用容器化：** 选择一个简单的Java应用（例如一个用Spring Boot编写的Hello World服务，如果没有现成的，可以自行创建一个返回固定消息的Spring Boot应用）。编写一个 Dockerfile 将该应用容器化：基础镜像可选用 `openjdk:8-jre` 等，在镜像内复制构建生成的JAR包，设置容器启动时运行 `java -jar` 该JAR。然后使用 `docker build -t hello-spring .` 构建镜像，接着 `docker run -p 8081:8080 hello-spring` 运行容器。通过浏览器访问验证应用是否成功运行在容器中。此练习可以加深对镜像和容器关系的理解，体验将开发完成的应用打包发布为容器的流程。如时间紧张，也可以跳过编写Dockerfile，直接练习运行官方提供的现成应用容器镜像。

> **工程化建议：** 在实际工作中，掌握 Docker 可以极大提高部署和环境配置的效率。建议养成使用容器的思维，比如本地开发需要一个数据库时，可以直接用 Docker 一键启动相应数据库容器（如 MySQL/MongoDB），避免手动安装。编写 Dockerfile 时遵循最佳实践，比如尽量使用较小的基础镜像、减少分层、在构建阶段清理临时文件等来优化镜像大小。此外，要注意容器的资源限制，可以通过 Docker 的参数控制 CPU 和内存占用，确保在团队项目中合理利用资源。

## 每日总结与反思

- **知识点梳理：** 学习结束后，用15分钟梳理当天涉及的所有工具和概念。将 Git、Maven、MySQL、IDEA、Docker 各自的要点列一个提纲，回忆其核心功能和操作步骤。例如：写出 Git 常用命令列表、Maven 构建流程步骤、MySQL 创建索引的语法、IDEA 调试的要点、Docker 启动容器的命令等。通过回顾笔记和大纲，加深对知识的记忆。
- **实践收获总结：** 记录下今天所有练习中遇到的问题和解决办法。如 Git 合并冲突是如何产生和解决的，Maven 依赖冲突如何定位，MySQL 查询优化后性能改善了多少，IDEA 调试如何帮助定位bug，Docker 镜像构建时踩到了哪些坑等等。思考这些问题在实际项目中可能如何出现、应该如何预防。
- **反思与改进：** 思考自己对这些工具的掌握程度是否达到了中高级开发的要求。有哪些操作还不熟练？例如是否能够熟练地在没有GUI辅助的情况下使用 Git 命令行完成任务，是否清楚 Maven 每个生命周期阶段的用途，是否理解索引失效的原因，IDEA 有哪些提高效率的功能还未涉及，Docker 部署应用时还存在哪些疑惑等。针对薄弱环节制定后续改进计划，比如明天抽空复习 Git 工作流细节，或在接下来项目中多用 Docker 部署调试环境。
- **工程化思维：** 最后，将今天所学联系到实际工程开发流程中，想一想在真实团队协作中，这些工具如何配合工作流发挥作用。例如代码从编写到部署，上述工具串联起来的流程：开发时用 IDEA 编码调试-> 使用 Git 做版本管理-> 用 Maven 打包构建-> 将应用和依赖打包进 Docker 容器部署-> 应用运行过程中与 MySQL 交互并通过优化保证性能。通过这样的整体思考，巩固对工具链的理解，做到知其然并知其所以然，为日后的工作实践做好准备。

---

**请指导我从第一步开始，并在我完成每一部分后，再给我下一个步骤。如果有问题，我会及时向你求助。**